#!/usr/bin/env python3
#
# zardo  [version 1.0.0]
# displays metrics of system and some other info ( weather , and jokes to keep you going )
# project is based on archey ( Credits goes to Melik Manukyan for the awesome code ) 
# - Changelog from archey :
# 1. Migrated  python3 support
# 2. fixed RAM and Disk
# 3. 
# zardo is a system information tool written in Python.
# 
# Maintained by Zrouga Mohamed <medzrouga@gmail.com>
# Distributed under the terms of the GNU General Public License v3.
# See http://www.gnu.org/licenses/gpl.txt for the full license text.


import os, sys, subprocess, optparse, re, linecache
from subprocess import Popen, PIPE
from optparse import OptionParser
from getpass import getuser
from time import ctime, sleep
import requests 
import subprocess


# Display [Comment/Uncomment to Enable/Disable information.]
display = [ 
 'user', # Display Username
 'hostname', # Display Machine Hostname
 'distro', # Display Distribution
 'kernel',  # Display Kernel Version
 'uptime',  # Display System Uptime
 'wm',  # Display Window Manager
 'de', # Display Desktop Environment
 'sh', # Display Current Shell
 'term', # Display Current Terminal
 'packages', # Display Number of Packages Installed
 'cpu', # Display CPU Model
 'ram', # Display RAM Usage
 'disk', # Display Disk Usage
 'weather'
 
 ]

# Array containing Values
result = []

# Options
if __name__=='__main__':
 parser = OptionParser(usage='%prog [-s, --screenshot]', description='Archey is a system information tool written in Python.', version="%prog 0.2.8")
 parser.add_option('-s', '--screenshot',
  action='store_true', dest='screenshot', help='take a screenshot')
 (options, args) = parser.parse_args()

# Define processes for identifying Desktop Environmentss, Window Managers, Shells.
de_dict = {
 'gnome-session': 'GNOME',
 'ksmserver': 'KDE',
 'xfce4-session': 'Xfce'}

wm_dict = {
 'awesome': 'Awesome',
 'beryl': 'Beryl',
 'blackbox': 'Blackbox',
 'compiz': 'Compiz',
 'dwm': 'DWM',
 'enlightenment': 'Enlightenment',
 'fluxbox': 'Fluxbox',
 'fvwm': 'FVWM',
 'i3': 'i3',
 'icewm': 'IceWM',
 'kwin': 'KWin',
 'metacity': 'Metacity',
 'musca': 'Musca',
 'openbox': 'Openbox',
 'pekwm': 'PekWM',
 'ratpoison': 'ratpoison',
 'scrotwm': 'ScrotWM',
 'wmaker': 'Window Maker',
 'wmfs': 'Wmfs',
 'wmii': 'wmii',
 'xfwm4': 'Xfwm',
 'xmonad': 'xmonad'}

sh_dict = {
 'zsh': 'Zsh',
 'bash': 'Bash',
 'dash': 'Dash',
 'fish': 'Fish',
 'ksh': 'Ksh',
 'csh': 'Csh',
 'jsh': 'Jsh',
 'tcsh': 'Tcsh'}

# Define Colour Scheme

clear = '\x1b[0m'
blackB = '\x1b[0;30m'
blackB = '\x1b[1;30m'
redN = '\x1b[0;31m'
redB = '\x1b[1;31m'
greenN = '\x1b[0;32m'
greenB = '\x1b[1;32m'
yellowN = '\x1b[0;33m'
yellowB = '\x1b[1;33m'
blueN = '\x1b[0;34m'
blueB = '\x1b[1;34m'
magentaN = '\x1b[0;35m'
magentaB = '\x1b[1;35m'
cyanN = '\x1b[0;36m'
cyanB = '\x1b[1;36m'
whiteN = '\x1b[0;37m'
whiteB = '\x1b[1;37m'

# Find running processes.
def xmonadfix(str):
 if re.compile("xmonad").match(str): return "xmonad"
 return str
p1 = Popen(['ps', '-u', getuser()], stdout=PIPE).communicate()[0].decode('utf-8').split('\n')
processes = map(xmonadfix, [process.split()[3] for process in p1 if process])
p1 = None

# Find Distro.
DetectDistro = Popen(['lsb_release', '-i'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')

# Print coloured key with normal value.
def output(key, value):
 if DetectDistro == 'Ubuntu':
  output ='%s%s:%s %s' % (redB, key, clear, value)
 if DetectDistro == 'Arch':
  output = '%s%s:%s %s' % (blueB, key, clear, value)
 if DetectDistro == 'Debian':
  output = '%s%s:%s %s' % (redB, key, clear, value)
 if DetectDistro == 'Fedora':
  output = '%s%s:%s %s' % (blueB, key, clear, value)
 if DetectDistro == 'CrunchBang':
  output = '%s%s:%s %s' % (whiteN, key, clear, value)
 if DetectDistro == 'LinuxMint':
  output = '%s%s:%s %s' % (greenB, key, clear, value) 
 result.append(output)

# RAM Function.
def ram_display():
 raminfo = Popen(['free', '-m'], stdout=PIPE).communicate()[0].decode('utf-8').split('\n')
 ram = ''.join(filter(re.compile('M').search, raminfo)).split()
 used = int(ram[1]) - int(ram[5])
 usedpercent = ((float(used) / float(ram[1])) * 100)
 if usedpercent <= 33:
  ramdisplay = '{}{} MB {}/ {} MB ({}%)'.format(greenB, used, clear, ram[1],round(usedpercent,2))
  output('RAM', ramdisplay)
 if usedpercent > 33 and usedpercent < 67:
  ramdisplay = '{}{} MB {}/ {} MB ({}%)'.format(yellowB, used, clear, ram[1],round(usedpercent,2))
  output('RAM', ramdisplay)
 if usedpercent >= 67:
  ramdisplay = '{}{} MB {}/ {} MB ({}%)'.format(redB, used, clear, ram[1],round(usedpercent,2))
  output('RAM', ramdisplay)

def weather_display():
  r = requests.get('http://wttr.in/?format=3')
  #r= os.popen('curl http://wttr.in/Tunis?format=3').read()
  #proc = subprocess.Popen(["curl wttr.in/Tunis?format=3"], stdout=subprocess.PIPE, shell=True)
  #(out, err) = proc.communicate()
  
  output('Weather',r.text)

# Screenshot Function.
screen = '%s' % options.screenshot
def screenshot():
 print('Taking shot in')
 lists = list(range(1,6))
 lists.reverse()
 for x in lists:
   print('{}..'.format(x))
   sys.stdout.flush()
   sleep(1)
 print('Say Cheeze!')
 subprocess.check_call(['scrot'])

# Operating System Function.
def distro_display(): 
 arch = Popen(['uname', '-m'], stdout=PIPE).communicate()[0].decode('utf-8').rstrip('\n')
 if DetectDistro == 'Debian':
  release = Popen(['lsb_release', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')
  distro = 'Debian %s %s' % (release, arch)
 if DetectDistro == 'Ubuntu':
  release = Popen(['lsb_release', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')
  distro = 'Ubuntu %s %s' % (release, arch)
 if DetectDistro == 'Arch':
  distro = 'Arch Linux %s' % arch 
 if DetectDistro == 'Fedora':
  release = Popen(['lsb_release', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')
  distro = 'Fedora %s %s' % (release, arch) 
 if DetectDistro == 'CrunchBang':
  release = Popen(['lsb_release', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')
 if DetectDistro == 'LinuxMint':
  release = Popen(['lsb_release', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')
  distro = 'Mint %s %s' % (release, arch)
 output('OS', distro)

# Kernel Function.
def kernel_display():
 kernel = Popen(['uname', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').rstrip('\n')
 output ('Kernel', kernel)

def user_display():
 username= os.getenv('USER')
 output ('User', username)

# Hostname Function.
def hostname_display():
 hostname = Popen(['uname', '-n'], stdout=PIPE).communicate()[0].decode('utf-8').rstrip('\n')
 output('Hostname', hostname)

# CPU Function.
def cpu_display():
 file = open('/proc/cpuinfo').readlines()
 cpuinfo = re.sub('  +', ' ', file[4].replace('model name\t: ', '').rstrip('\n'))
 output ('CPU', cpuinfo) 

# Uptime Function.
def uptime_display():
 fuptime = int(open('/proc/uptime').read().split('.')[0])
 day = int(fuptime / 86400)
 fuptime = fuptime % 86400
 hour = int(fuptime / 3600)
 fuptime = fuptime % 3600
 minute = int(fuptime / 60)
 uptime = ''
 if day == 1:
  uptime += '%d day, ' % day
 if day > 1:
  uptime += '%d days, ' % day
 uptime += '%d:%02d' % (hour, minute)
 output('Uptime', uptime)

# Desktop Environment Function.
def de_display():
 for key in de_dict.keys():
  if key in processes:
   de = de_dict[key]
   output ('Desktop Environment', de)

# Window Manager Function.
def wm_display():
 for key in wm_dict.keys():
  if key in processes:
   wm = wm_dict[key]
   output ('Window Manager', wm)

# Shell Function.
def sh_display():
 sh = os.getenv("SHELL").split('/')[-1].capitalize()
 output ('Shell', sh)

# Terminal Function.
def term_display():
 term = os.getenv("TERM").split('/')[-1].capitalize()
 output ('Terminal', term)

# Packages Function.
def packages_display():
 if DetectDistro == 'Ubuntu':
  p1 = Popen(['dpkg', '--get-selections'], stdout=PIPE)
  p2 = Popen(['grep', '-v', 'deinstall'], stdin=p1.stdout, stdout=PIPE)
  p3 = Popen(['wc', '-l'], stdin=p2.stdout, stdout=PIPE)
  packages = p3.communicate()[0].decode('utf-8').rstrip('\n')
  output ('Packages', packages)
 if DetectDistro == 'Arch':
  p1 = Popen(['pacman', '-Q'], stdout=PIPE)
  p2 = Popen(['wc', '-l'], stdin=p1.stdout, stdout=PIPE)
  packages = p2.communicate()[0].decode('utf-8').rstrip('\n')
  output ('Packages', packages)
 if DetectDistro == 'Debian':
  p1 = Popen(['dpkg', '--get-selections'], stdout=PIPE)
  p2 = Popen(['grep', '-v', 'deinstall'], stdin=p1.stdout, stdout=PIPE)
  p3 = Popen(['wc', '-l'], stdin=p2.stdout, stdout=PIPE)
  packages = p3.communicate()[0].rstrip('\n')
  output ('Packages', packages)
 if DetectDistro == 'CrunchBang':
  p1 = Popen(['dpkg', '--get-selections'], stdout=PIPE)
  p2 = Popen(['grep', '-v', 'deinstall'], stdin=p1.stdout, stdout=PIPE)
  p3 = Popen(['wc', '-l'], stdin=p2.stdout, stdout=PIPE)
  packages = p3.communicate()[0].rstrip('\n')
  output ('Packages', packages)
 if DetectDistro == 'Fedora':
  p1 = Popen(['rpm', '-qa'], stdout=PIPE)
  p2 = Popen(['wc', '-l'], stdin=p1.stdout, stdout=PIPE)
  packages = p2.communicate()[0].rstrip('\n')
 if DetectDistro == 'LinuxMint':
  p1 = Popen(['dpkg', '--get-selections'], stdout=PIPE)
  p2 = Popen(['grep', '-v', 'deinstall'], stdin=p1.stdout, stdout=PIPE)
  p3 = Popen(['wc', '-l'], stdin=p2.stdout, stdout=PIPE)
  packages = p3.communicate()[0].rstrip('\n')
  output ('Packages', packages)

# Disk Function.
def disk_display():
 p1 = Popen(['df', '-Tlh', '--total', '-t', 'ext4', '-t', 'ext3', '-t', 'ext2', '-t', 'reiserfs', '-t', 'jfs', '-t', 'ntfs', '-t', 'fat32', '-t', 'btrfs', '-t', 'fuseblk'], stdout=PIPE).communicate()[0]
 total = p1.splitlines()[-1]
 used = total.split()[3]
 size = total.split()[2]
 usedpercent = float(re.sub("[A-Z]", "", used.decode('utf-8'))) / float(re.sub("[A-Z]", "", size.decode('utf-8'))) * 100
 if usedpercent <= 33:
  fs = '%s%s %s/ %s' % (greenB, used.decode('utf-8'), clear, size.decode('utf-8'))  
  output ('Disk', fs) 
 if usedpercent > 33 and usedpercent < 67:
  fs = '%s%s %s/ %s' % (yellowB, used.decode('utf-8'), clear, size.decode('utf-8'))  
  output ('Disk', fs) 
 if usedpercent >= 67:
  fs = '%s%s %s/ %s' % (redB, used.decode('utf-8'), clear, size.decode('utf-8'))  
  output ('Disk', fs) 
	  
 
# Run functions found in 'display' array.
for x in display:
 funcname=x+'_display'
 func=locals()[funcname]
 func()

# Array containing values.
result.extend(['']*(20 - len(display)))

# Result.
if DetectDistro == 'Ubuntu':
 print("""
%s                          .oyhhs:   %s
%s                 ..--.., %sshhhhhh-   %s
%s               -+++++++++`:%syyhhyo`  %s
%s          .--  %s-++++++++/-.-%s::-`    %s
%s        .::::-   %s:-----:/+++/++/.   %s
%s       -:::::-.          %s.:++++++:  %s
%s  ,,, %s.:::::-`             %s.++++++- %s
%s./+++/-%s`-::-                %s./////: %s
%s+++++++ %s.::-                        %s
%s./+++/-`%s-::-                %s:yyyyyo %s
%s  ``` `%s-::::-`             %s:yhhhhh: %s
%s       -:::::-.         %s`-ohhhhhh+  %s
%s        .::::-` %s-o+///+oyhhyyyhy:   %s
%s         `.--  %s/yhhhhhhhy+%s,....     %s
%s               /hhhhhhhhh%s-.-:::;    %s
%s               `.:://::- %s-:::::;    %s
%s                         `.-:-'     %s
%s                                    %s
%s"""%( redN, result[0], redB, redN, result[1], redB, redN, result[2], yellowB, redB, redN, result[3], yellowB, redB, result[4], yellowB, redB, result[5], redB, yellowB, redB, result[6], redB, yellowB, redB, result[7], redB, yellowB, result[8], redB, yellowB, redN, result[9], redB, yellowB, redN, result[10], yellowB, redN, result[11], yellowB, redN, result[12], yellowB, redN, yellowB, result[13], redN, yellowB, result[14], redN, yellowB, result[15], yellowB, result[16], yellowB, result[17], clear ))





if screen == 'True':
 screenshot()
